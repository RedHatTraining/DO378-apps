# # datasource configuration
# %dev.quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/conference
# %dev.quarkus.http.port=8081
# %test.quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/conference
# quarkus.datasource.jdbc.url = jdbc:postgresql://postgresql:5432/conference
# quarkus.datasource.db-kind = postgresql
# quarkus.datasource.username = conference_user
# quarkus.datasource.password = confi_user

# # drop and create the database at startup (use `update` to only update the schema)
# quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQL10Dialect
# quarkus.hibernate-orm.database.generation=drop-and-create
# quarkus.hibernate-orm.sql-load-script=META-INF/import-test.sql
%dev.quarkus.http.port=8081
quarkus.http.cors=true

# quarkus.datasource.devservices.image-name=registry.ocp4.example.com:8443/redhattraining/do378-postgres:14.1
quarkus.datasource.devservices.image-name=quay.io/redhattraining/do378-postgres:14.1

# Intraservice comms
org.acme.conference.session.SpeakerService/mp-rest/url=http://localhost:8082
%prod.org.acme.conference.session.SpeakerService/mp-rest/url=http://speaker:8080

# Feature toggles
features.session-integration=true

# Enable Tracing
quarkus.jaeger.service-name=session
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
quarkus.jaeger.endpoint=http://localhost:14268/api/traces
quarkus.jaeger.propagation=b3
quarkus.jaeger.reporter-log-spans=true
